TODO 1. SCAN INFIX FROM LEFT TO RIGHT

TODO 2. If the scanned character is an operand, append it with final Infix to Postfix string.

TODO 3. If the precedence order of the scanned(incoming) operator is greater than the precedence order
    of the operator in the stack (or the stack is empty or the stack
    contains a ‘(‘ or ‘[‘ or ‘{‘), push it on stack.

 TODO 3 ELSE. Else, Pop all the operators from the stack which are greater than or equal to in precedence than that
            of the scanned operator. After doing that Push the scanned operator to the stack.
            (If you encounter parenthesis while popping then stop there and push the scanned operator in the stack.)

TODO 4. If the scanned character is an ‘(‘ or ‘[‘ or ‘{‘, push it to the stack.


TODO 5. If the scanned character is an ‘)’or ‘]’ or ‘}’,
             pop the stack and output it until a ‘(‘ or ‘[‘ or ‘{‘ respectively is encountered,
            and discard both the parenthesis.

TODO 6. Repeat steps 2-6 until infix expression is scanned.

TODO 7. Print the output

TODO 8. Pop and output from the stack until it is not empty.